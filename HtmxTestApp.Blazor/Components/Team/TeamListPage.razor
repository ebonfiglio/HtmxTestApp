@page "/teams"
@using HtmxTestApp.Blazor.Components.Shared
@using HtmxTestApp.Blazor.Helpers
@using HtmxTestApp.Domain.Services.Contracts
@using HtmxTestApp.Shared.Entities
@using HtmxTestApp.Shared.Models
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Components.Web.HtmlRendering
@inject ITeamService TeamService
@inject ICountryService CountryService
@inject BlazorRenderer BlazorRenderer
@inject IHttpContextAccessor HttpContextAccessor
@attribute [StreamRendering]

<h3>Teams</h3>
<div class="mb-3">
    <a class="btn btn-primary" href="/teamform">Add Team</a>
    <DialogButton HTMLContent="@dialogHtmlContent" />
</div>
<CustomDataGrid TItem="TeamDto"
Data="teams"
PageSize="20"
ShowFilterRow="true" 
Columns="gridColumns" />

<DynamicFormHelper FormName="TeamForm" OnSubmit="HandleValidSubmit"></DynamicFormHelper>

<form data-enhance @formname="Test" method="post" @onsubmit="this.CreateRandomTeams">
    <AntiforgeryToken />
        <button type="submit" class="btn btn-primary" value="Save">Create Random Teams</button>
    </form>
<form data-enhance @formname="TestBulk" method="post" @onsubmit="this.CreateRandomTeamsBulk">
    <AntiforgeryToken />
    <button type="submit" class="btn btn-primary" value="Save">Create Random Teams Bulk</button>
</form>

<form data-enhance @formname="TestDelete" method="post" @onsubmit="this.DeleteAllTeams">
    <AntiforgeryToken />
    <button type="submit" class="btn btn-danger" value="Save">Delete All Teams</button>
</form>

<div>
    <h4>Performance Results</h4>
    <p>@performanceResult</p>
</div>

@code {
    string dialogHtmlContent = string.Empty;
    IEnumerable<TeamDto> teams;
    private List<GridColumn<TeamDto>> gridColumns = new();
    private string performanceResult = string.Empty;

    private static readonly List<string> UsCities = new()
    {
        "New York", "Los Angeles", "Chicago", "Houston", "Phoenix",
        "Philadelphia", "San Antonio", "San Diego", "Dallas", "San Jose",
        "Austin", "Jacksonville", "Fort Worth", "Columbus", "Charlotte",
        "San Francisco", "Indianapolis", "Seattle", "Denver", "Washington",
        "Boston", "El Paso", "Nashville", "Detroit", "Oklahoma City",
        "Las Vegas", "Louisville", "Baltimore", "Milwaukee", "Albuquerque",
        "Tucson", "Fresno", "Sacramento", "Mesa", "Kansas City"
    };
    private static readonly List<string> Mascots = new()
    {
        "Eagles", "Tigers", "Bears", "Lions", "Wolves",
        "Hawks", "Panthers", "Sharks", "Dragons", "Raptors",
        "Knights", "Warriors", "Titans", "Giants", "Vikings",
        "Falcons", "Bulldogs", "Cougars", "Mustangs", "Pirates",
        "Spartans", "Rams", "Wildcats", "Broncos", "Buffaloes",
        "Cardinals", "Hornets", "Jets", "Raiders", "Stallions"
    };

    protected override async Task OnInitializedAsync()
    {
        dialogHtmlContent = await BlazorRenderer.RenderComponent<TeamForm>();
        var result = await TeamService.GetAllAsync();
        teams = result.Select(l => new TeamDto { Id = l.Id ?? Guid.Empty, CountryId = l.CountryId, Name = l.Name }).ToList();
        gridColumns = new List<GridColumn<TeamDto>>()
        {
            new GridColumn<TeamDto> { Field="Id", Title="ID", Sortable=true },
            new GridColumn<TeamDto> { Field="Name", Title="Name", Sortable=true }
        };
    }

    public async Task HandleValidSubmit()
    {
        IFormCollection form = HttpContextAccessor.HttpContext.Request.Form;
        string modelName = TeamForm.ModelName;

        Team team = new();

        foreach (var key in form.Keys)
        {
            if (key.StartsWith(modelName + "."))
            {
                var propertyName = key.Substring(modelName.Length + 1);
                var propertyValue = form[key].ToString();

                var property = typeof(Team).GetProperty(propertyName);
                if (property != null && property.CanWrite)
                {
                    object convertedValue;
                    if (property.PropertyType == typeof(Guid?))
                    {
                        convertedValue = string.IsNullOrEmpty(propertyValue) ? (Guid?)null : Guid.Parse(propertyValue);
                    }
                    else
                    {
                        convertedValue = Convert.ChangeType(propertyValue, property.PropertyType);
                    }
                    property.SetValue(team, convertedValue);
                }
            }
        }
        var clickedButton = form["submitButton"].ToString();
        if (clickedButton == "Save")
        {
            await TeamService.AddAsync(team);
            var result = await TeamService.GetAllAsync();
            teams = result.Select(l => new TeamDto { Id = l.Id ?? Guid.Empty, CountryId = l.CountryId, Name = l.Name }).ToList();
        }

        else if (clickedButton == "Cancel")
        {

        }
    }

    private async Task CreateRandomTeams()
    {
        var stopwatch = System.Diagnostics.Stopwatch.StartNew();

        var random = new Random();
        var countryResult = await CountryService.GetAllAsync();
        var countryId = countryResult.FirstOrDefault().Id;

        for (int i = 0; i < 100; i++)
        {
            var city = UsCities[random.Next(UsCities.Count)];
            var mascot = Mascots[random.Next(Mascots.Count)];
            var teamName = $"{city} {mascot}";

            var team = new Team
                {
                    Id = Guid.NewGuid(),
                    Name = teamName,
                    CountryId = countryId
                };

            await TeamService.AddAsync(team);
        }

        var result = await TeamService.GetAllAsync();
        teams = result.Select(l => new TeamDto { Id = l.Id ?? Guid.Empty, CountryId = l.CountryId, Name = l.Name }).ToList();

        stopwatch.Stop();
        performanceResult = $"CreateRandomTeams executed in {stopwatch.ElapsedMilliseconds} ms";
    }

    private async Task CreateRandomTeamsBulk()
    {
        var stopwatch = System.Diagnostics.Stopwatch.StartNew();

        var random = new Random();
        var countryResult = await CountryService.GetAllAsync();
        var countryId = countryResult.FirstOrDefault()?.Id ?? Guid.Empty;

        var teamsToAdd = new List<Team>();

        for (int i = 0; i < 10000; i++)
        {
            var city = UsCities[random.Next(UsCities.Count)];
            var mascot = Mascots[random.Next(Mascots.Count)];
            var teamName = $"{city} {mascot}";

            var team = new Team
                {
                    Id = Guid.NewGuid(),
                    Name = teamName,
                    CountryId = countryId
                };

            teamsToAdd.Add(team);
        }

        await TeamService.AddRangeAsync(teamsToAdd);

        var result = await TeamService.GetAllAsync();
        teams = result.Select(l => new TeamDto { Id = l.Id ?? Guid.Empty, CountryId = l.CountryId, Name = l.Name }).ToList();

        stopwatch.Stop();
        performanceResult = $"CreateRandomTeamsBulk executed in {stopwatch.ElapsedMilliseconds} ms";
    }

    private async Task DeleteAllTeams()
    {
        //var allTeams = teams.ToHashSet();
        foreach (var team in teams)
        {
            await TeamService.DeleteAsync(team.Id);
            // teams = teams.Where(t => t.Id != team.Id);
        }
    }
}